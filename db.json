{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0}],"Cache":[{"_id":"source/_posts/2015/-ffmpeg-mp4-.md","shasum":"a89a235879ac7895476ebfc221ca04afc3a8eb91","modified":1446100189000},{"_id":"source/_posts/2015/hexo-github-blog.md","shasum":"8242e186ce14f2f758cd0a8279bb1a34049533c2","modified":1449243704000},{"_id":"source/_posts/2015/iosdevicetoken.md","shasum":"58b303cd0df8486e1bd955c825897e43c64af244","modified":1445132810000},{"_id":"source/_posts/2015/mongodbpython.md","shasum":"ce66067c6d3544ec1b6d03f38a9123e742cd7d3e","modified":1445137762000},{"_id":"source/_posts/2015/nginx-lua-redis.md","shasum":"54bc64bdc0cdc0372c3452a66f73b49db3d663cd","modified":1445942707000},{"_id":"source/_posts/2015/python-java-aes.md","shasum":"960eb632267eb8ee91ee0a60dbca35c1566961ab","modified":1446113345000},{"_id":"source/_posts/2015/react-native-for-android--.md","shasum":"7765306c9cbe854355baa9aed12e23a8c6530fa8","modified":1445500264000},{"_id":"source/_posts/2015/spring-dynamic-datasource.md","shasum":"8a04e08673e56c2b6510e8c20a89b09e24989e57","modified":1449212130000},{"_id":"source/_posts/2015/wechat-yao.md","shasum":"038fea56575722044562d64b6e014393232e49ca","modified":1449214139000},{"_id":"source/_posts/2015/zaji.md","shasum":"0191881e0c4a9a96b84de93691a32135a718b5b9","modified":1453740550000},{"_id":"source/_posts/2016/flask-bugs.md","shasum":"8da24717c8a6e45171fa91e79583616663ed4c75","modified":1452615622000},{"_id":"source/_posts/https.md","shasum":"28b8ff79a2a9c49a58c95c9e664d9e561725cf8c","modified":1444795910000},{"_id":"themes/landscape/Gruntfile.js","shasum":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1444723795000},{"_id":"themes/landscape/LICENSE","shasum":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1444723795000},{"_id":"themes/landscape/README.md","shasum":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1444723795000},{"_id":"themes/landscape/_config.yml","shasum":"e1fa116f99b8ab7c23ab75b59932a1a5b9aeb1e3","modified":1444723795000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","shasum":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1444723795000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","shasum":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1444723795000},{"_id":"themes/landscape/layout/_partial/archive.ejs","shasum":"d7de6421497ffaf65e4f5fe4bed71fcea51fde80","modified":1444723795000},{"_id":"themes/landscape/layout/_partial/article.ejs","shasum":"01201725258ad2aaee606cd4dfdebc21b646def1","modified":1444723795000},{"_id":"themes/landscape/layout/_partial/baidu-tongji.ejs","shasum":"becb7d4fa451b92ee1e0b111b3d077a6d52da817","modified":1445440830000},{"_id":"themes/landscape/layout/_partial/footer.ejs","shasum":"e1cda5b29f3d0c56b287e3d33a2614e3652d85c0","modified":1444795517000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","shasum":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1444723795000},{"_id":"themes/landscape/layout/_partial/head.ejs","shasum":"c6c89ede53b22802302df218ac464af27e35d835","modified":1445440841000},{"_id":"themes/landscape/layout/_partial/header.ejs","shasum":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1444723795000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","shasum":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1444723795000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","shasum":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1444723795000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","shasum":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1444723795000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","shasum":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1444723795000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","shasum":"f26d30355ba9144c51e700e8edc6a4ab6144ff9a","modified":1444723795000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","shasum":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1444723795000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","shasum":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1444723795000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","shasum":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1444723795000},{"_id":"themes/landscape/layout/_widget/archive.ejs","shasum":"985fbeb01142b9d526cda8ebc372c1d361d69a6b","modified":1444723795000},{"_id":"themes/landscape/layout/_widget/category.ejs","shasum":"36ab37878129d152e3cbdeb839c08e52af1acd58","modified":1444723795000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","shasum":"feba7c00fa59ba13bf870b358a499fde4473d335","modified":1444723795000},{"_id":"themes/landscape/layout/_widget/tag.ejs","shasum":"b3f321ddda6be2702a286d5b11af9533509506fb","modified":1444723795000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","shasum":"34dc8cdd96cdb41dd11cb7513f13714373e5104a","modified":1444723795000},{"_id":"themes/landscape/layout/archive.ejs","shasum":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1444723795000},{"_id":"themes/landscape/layout/category.ejs","shasum":"765426a9c8236828dc34759e604cc2c52292835a","modified":1444723795000},{"_id":"themes/landscape/layout/index.ejs","shasum":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1444723795000},{"_id":"themes/landscape/layout/layout.ejs","shasum":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1444723795000},{"_id":"themes/landscape/layout/page.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1444723795000},{"_id":"themes/landscape/layout/post.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1444723795000},{"_id":"themes/landscape/layout/tag.ejs","shasum":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1444723795000},{"_id":"themes/landscape/package.json","shasum":"85358dc34311c6662e841584e206a4679183943f","modified":1444723795000},{"_id":"themes/landscape/scripts/fancybox.js","shasum":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1444723795000},{"_id":"themes/landscape/source/css/_extend.styl","shasum":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1444723795000},{"_id":"themes/landscape/source/css/_partial/archive.styl","shasum":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1444723795000},{"_id":"themes/landscape/source/css/_partial/article.styl","shasum":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1444723795000},{"_id":"themes/landscape/source/css/_partial/comment.styl","shasum":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1444723795000},{"_id":"themes/landscape/source/css/_partial/footer.styl","shasum":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1444723795000},{"_id":"themes/landscape/source/css/_partial/header.styl","shasum":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1444723795000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","shasum":"fce848cd7c847ba7b04baa7b67a9610b340f4593","modified":1445136445000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","shasum":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1444723795000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","shasum":"890349df5145abf46ce7712010c89237900b3713","modified":1444723795000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","shasum":"bc5487b9a0bfe5f745423331824d3f3637ccd430","modified":1444723795000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","shasum":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1444723795000},{"_id":"themes/landscape/source/css/_util/grid.styl","shasum":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1444723795000},{"_id":"themes/landscape/source/css/_util/mixin.styl","shasum":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1444723795000},{"_id":"themes/landscape/source/css/_variables.styl","shasum":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1444723795000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","shasum":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1444723795000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1444723795000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","shasum":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1444723795000},{"_id":"themes/landscape/source/css/style.styl","shasum":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1444723795000},{"_id":"themes/landscape/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1444723795000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1444723795000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1444723795000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1444723795000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1444723795000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1444723795000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1444723795000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1444723795000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1444723795000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1444723795000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1444723795000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1444723795000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1444723795000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1444723795000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1444723795000},{"_id":"themes/landscape/source/js/script.js","shasum":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1444723795000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1444723795000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","shasum":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1444723795000},{"_id":"themes/landscape/source/css/images/banner.jpg","shasum":"843d9d47bf2b7b75495db11b3d765efaaae442a9","modified":1444723795000},{"_id":"public/js/script.js","modified":1452616175904,"shasum":"2876e0b19ce557fca38d7c6f49ca55922ab666a1"},{"_id":"public/fancybox/jquery.fancybox.pack.js","modified":1452616175909,"shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e"},{"_id":"public/fancybox/jquery.fancybox.js","modified":1452616175911,"shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed"},{"_id":"public/fancybox/jquery.fancybox.css","modified":1452616175913,"shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","modified":1452616175915,"shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","modified":1452616175918,"shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","modified":1452616175921,"shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","modified":1452616175928,"shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","modified":1452616175930,"shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"public/fancybox/helpers/fancybox_buttons.png","modified":1452616175935,"shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"public/fancybox/fancybox_sprite@2x.png","modified":1452616175943,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/fancybox/fancybox_sprite.png","modified":1452616175948,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/fancybox/fancybox_overlay.png","modified":1452616175953,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/fancybox/fancybox_loading@2x.gif","modified":1452616175957,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/fancybox/fancybox_loading.gif","modified":1452616175959,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/fancybox/blank.gif","modified":1452616175962,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/css/style.css","modified":1452616176486,"shasum":"589f8222efccb8cd6acb74d068b3bec97b1f3670"},{"_id":"public/css/images/banner.jpg","modified":1452616176649,"shasum":"843d9d47bf2b7b75495db11b3d765efaaae442a9"},{"_id":"public/css/fonts/fontawesome-webfont.woff","modified":1452616176654,"shasum":"04c3bf56d87a0828935bd6b4aee859995f321693"},{"_id":"public/css/fonts/fontawesome-webfont.ttf","modified":1452616176657,"shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f"},{"_id":"public/css/fonts/fontawesome-webfont.svg","modified":1452616176660,"shasum":"46fcc0194d75a0ddac0a038aee41b23456784814"},{"_id":"public/css/fonts/fontawesome-webfont.eot","modified":1452616176663,"shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e"},{"_id":"public/css/fonts/FontAwesome.otf","modified":1452616176666,"shasum":"b5b4f9be85f91f10799e87a083da1d050f842734"},{"_id":"public/2016/01/12/2016/flask-bugs/index.html","modified":1452616176720,"shasum":"58ea4182179d15073ead22ecf45562c2ba99b573"},{"_id":"public/2015/12/04/2015/hexo-github-blog/index.html","modified":1452616176739,"shasum":"6edfcff810230323b56db5e9b4300b384f2aa2e0"},{"_id":"public/2015/12/04/2015/spring-dynamic-datasource/index.html","modified":1452616176765,"shasum":"120af21c954b8dc46f1e42593345294709e7d4ff"},{"_id":"public/2015/12/03/2015/wechat-yao/index.html","modified":1452616176786,"shasum":"66c868a45dd92924722995daa53afbe89b7d8a27"},{"_id":"public/2015/10/29/2015/python-java-aes/index.html","modified":1452616176805,"shasum":"ea49fda4746a97c00992faf369226c1ac5566e8a"},{"_id":"public/2015/10/29/2015/-ffmpeg-mp4-/index.html","modified":1452616176818,"shasum":"d66b292012e17e3022047937d78d2d5464283250"},{"_id":"public/2015/10/27/2015/nginx-lua-redis/index.html","modified":1452616176837,"shasum":"ccdfcb9e735cc5b6a410b379bc1e737fd4423310"},{"_id":"public/2015/10/22/2015/zaji/index.html","modified":1453740573898,"shasum":"24411778546e6b16d686fdfd8cefe4ecb9e2f958"},{"_id":"public/2015/10/21/2015/react-native-for-android--/index.html","modified":1452616176858,"shasum":"26207da29c79556ae33b88f90927be6d061a6c39"},{"_id":"public/2015/10/18/2015/mongodbpython/index.html","modified":1452616176867,"shasum":"415498aff5ffc1f5bf1e5a1aace0280524602a74"},{"_id":"public/2015/10/16/2015/iosdevicetoken/index.html","modified":1452616176886,"shasum":"57135762347942f0bda921bb8a874c23cfdb3b25"},{"_id":"public/2015/10/13/https/index.html","modified":1452616176901,"shasum":"8d7943ca7b47ef70cce4418e47e6780e0033f467"},{"_id":"public/archives/index.html","modified":1452616176915,"shasum":"4f7e844f75c0cd2711a37060b728dbb7de0debc1"},{"_id":"public/archives/page/2/index.html","modified":1452616176920,"shasum":"536cdd56da3a8e5b43cda254f3cffd2af3bb441d"},{"_id":"public/archives/2015/index.html","modified":1452616176933,"shasum":"91cc40910c06f9c066ea33dfe1d3f7d9b2602a74"},{"_id":"public/archives/2015/page/2/index.html","modified":1452616176939,"shasum":"20b6701c904214170b14275ffb324c0448f9d702"},{"_id":"public/archives/2015/10/index.html","modified":1452616176953,"shasum":"265abcba82d83318bc7645ffb889230d34668724"},{"_id":"public/archives/2015/12/index.html","modified":1452616176962,"shasum":"8e123d312cb5139f1dd566dd0b392962b8d9f1c6"},{"_id":"public/archives/2016/index.html","modified":1452616176965,"shasum":"9726564bdcbbf331972f26cdc2e040aa2c01ca1f"},{"_id":"public/archives/2016/01/index.html","modified":1452616176969,"shasum":"121f8765498c342d4e97df0d559731e6c86e77e5"},{"_id":"public/categories/其他/index.html","modified":1452616176974,"shasum":"1ccf9cdcae9482afe4e0835ecf884cbb2a66e661"},{"_id":"public/categories/技术/index.html","modified":1452616176989,"shasum":"ee67249992afde8fe5037e73ef21e8804bb94363"},{"_id":"public/categories/杂记/index.html","modified":1452616176992,"shasum":"719f690a8ee876efdec7db7378f7c4d4d61a02c4"},{"_id":"public/index.html","modified":1453740574561,"shasum":"327747df7aefbb58071c891bcd0fd98a4bf3ed6b"},{"_id":"public/page/2/index.html","modified":1452616177042,"shasum":"becebc5dd5b4c05995734585dec0012b41889ac5"},{"_id":"public/sitemap.xml","modified":1453740574600,"shasum":"3079ff0a9b5ff8fe142554b3d510ec9b7ece6a46"}],"Category":[{"name":"其他","_id":"cijbm5x800001lipy9q52yn16"},{"name":"技术","_id":"cijbm5x8d0004lipy7kywn8oz"},{"name":"杂记","_id":"cijbm5x8h0009lipy6rtdyzdh"}],"Data":[],"Page":[],"Post":[{"layout":"post","title":"用 FFMPEG 合并 MP4 视频","date":"2015-10-29T06:28:00.000Z","_content":"# ffmpeg + ts\n重磅推出终极解决方案。这个的思路是先将 mp4 转化为同样编码形式的 ts 流，因为 ts流是可以 concate 的，先把 mp4 封装成 ts ，然后 concate ts 流， 最后再把 ts 流转化为 mp4。\n```\nffmpeg -i 1.mp4 -vcodec copy -acodec copy -vbsf h264_mp4toannexb 1.ts\nffmpeg -i 2.mp4 -vcodec copy -acodec copy -vbsf h264_mp4toannexb 2.ts\nffmpeg -i \"concat:1.ts|2.ts\" -acodec copy -vcodec copy -absf aac_adtstoasc output.mp4\n```\n","source":"_posts/2015/-ffmpeg-mp4-.md","raw":"layout: post\ntitle: \"用 FFMPEG 合并 MP4 视频\"\ndate: \"2015-10-29 14:28\"\ncategories: 其他\n---\n# ffmpeg + ts\n重磅推出终极解决方案。这个的思路是先将 mp4 转化为同样编码形式的 ts 流，因为 ts流是可以 concate 的，先把 mp4 封装成 ts ，然后 concate ts 流， 最后再把 ts 流转化为 mp4。\n```\nffmpeg -i 1.mp4 -vcodec copy -acodec copy -vbsf h264_mp4toannexb 1.ts\nffmpeg -i 2.mp4 -vcodec copy -acodec copy -vbsf h264_mp4toannexb 2.ts\nffmpeg -i \"concat:1.ts|2.ts\" -acodec copy -vcodec copy -absf aac_adtstoasc output.mp4\n```\n","slug":"2015/-ffmpeg-mp4-","published":1,"updated":"2015-10-29T06:29:49.000Z","comments":1,"photos":[],"link":"","_id":"cijbm5x7u0000lipy0ptl4g8n"},{"title":"Nginx+Tomcat 配置 https","date":"2015-10-13T08:13:45.000Z","_content":"# SSL/TLS简介\n安全传输层协议（TLS）与其前辈加密套接字（SSL）都是用于保证 Web 浏览器与 Web 服务器通过安全连接进行通信的技术。利用这些技术，我们所要传送的数据会在一端进行加密，传输到另一端后再进行解密（在处理数据之前）。这是一种双向的操作，服务器和浏览器都能在发送数据前对它们进行加密处理。\n\nSSL/TLS 协议的另一个重要方面是认证。当我们初始通过安全连接与 Web 服务器进行通信时，服务器将提供给 Web 浏览器一组“证书”形式的凭证，用来证明站点的归属方以及站点的具体声明。某些情况下，服务器也会请求浏览器出示证书，来证明作为操作者的“你”所宣称的身份是否属实。这种证书叫做“客户端证书”，但事实上它更多地用于 B2B（企业对企业电子商务）的交易中，而并非针对个人用户。大多数启用了 SSL 协议的 Web 服务器都不需要客户端认证。\n\n# 证书申请\n## 使用 OpenSSL 生成 SSL Key 和 CSR\n\n域名，也称为 Common Name，因为特殊的证书不一定是域名：example.com\n\n组织或公司名字（Organization）：Example, Inc.\n\n部门（Department）：可以不填写，这里我们写 Web Security\n\n城市（City）：Beijing\n\n省份（State / Province）：Beijing\n\n国家（Country）：CN\n\n加密强度：2048 位，如果你的机器性能强劲，也可以选择 4096 位\n\n按照以上信息，使用 OpenSSL 生成 key 和 csr 的命令如下\n\n```\nopenssl req -new -newkey rsa:2048 -sha256 -nodes -out example_com.csr -keyout example_com.key -subj \"/C=CN/ST=Beijing/L=Beijing/O=Example Inc./OU=Web Security/CN=example.com\"  \n```\nPS：如果是泛域名证书，则应该填写*.example.com\n你可以在系统的任何地方运行这个命令，会自动在当前目录生成 example_com.csr 和 example_com.key 这两个文件\n这个 CSR 文件就是你需要提交给 SSL 认证机构的，当你的域名或组织通过验证后，认证机构就会颁发给你一个 example_com.crt\n而 example_com.key 是需要用在 Nginx 配置里和 example_com.crt 配合使用的，需要好好保管，千万别泄露给任何第三方。\n\n[b0a12fd3]: http://www.oschina.net/p/java-exportpriv \"java-exportpriv\"\n\n# Nginx\n## 证书处理\nNginx和Tomcat不一样，它要求的是证书文件 .crt 和私钥 .key 。遗憾的是，我们的私钥在keystore里面，而JDK自带的keytool并不提供私钥的导出功能，所以我们得借助第三方工具来导出私钥。\n### 1. 导出私钥\n有一个开源的私钥导出工具叫做 [java-exportpriv][b0a12fd3] 。它是一个简单的java程序，你下载以后参考它的说明，编译，然后运行即可，非常简单，我就不多罗嗦了。\n### 2. 创建 crt\n和Apache不一样，Nginx没有Certificat Chain这个参数，所以你要把你的证书和中间证书合并。合并证书很简单，创建一个先的文件 oschina-chain.crt，内容如下：\n```\n-----BEGIN CERTIFICATE-----\n这里是你证书的内容\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\n这里是中间证书的内容\n-----END CERTIFICATE-----\n```\n## 修改配置\n```\nserver {\n      listen       443 ssl;\n      server_name  localhost;\n      ssl                  on;\n      ssl_certificate      /oschina/webapp/oschina-chain.crt;\n      ssl_certificate_key  /oschina/webapp/oschina.key;\n\n  location / {\n          include proxy.conf;\n          proxy_pass   https://61.145.122.155:443;\n      }\n\n  }\n```\n## 强制 https\n```\n  server {\n      listen 80;\n      server_name localhost;\n      rewrite ^/(.*) https://$server_name/$1 permanent;\n  }\n```\n## 增强\n但是这么做并不安全，默认是 SHA-1 形式，而现在主流的方案应该都避免 SHA-1，为了确保更强的安全性，我们可以采取迪菲－赫尔曼密钥交换\n\n首先，进入 /etc/ssl/certs 目录并生成一个 dhparam.pem\n```\nopenssl dhparam -out dhparam.pem 2048 # 如果你的机器性能足够强大，可以用 4096 位加密  \n```\n\n生成完毕后，在 Nginx 的 SSL 配置后面加入\n```\n        ssl_prefer_server_ciphers on;\n        ssl_dhparam /etc/ssl/certs/dhparam.pem;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n        ssl_ciphers \"EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS !RC4\";\n        keepalive_timeout 70;\n        ssl_session_cache shared:SSL:10m;\n        ssl_session_timeout 10m;\n```\n同时，如果是全站 HTTPS 并且不考虑 HTTP 的话，可以加入 HSTS 告诉你的浏览器本网站全站加密，并且强制用 HTTPS 访问\n```\n        add_header Strict-Transport-Security max-age=63072000;\n        add_header X-Frame-Options DENY;\n        add_header X-Content-Type-Options nosniff;\n```\n\n# Tomcat\n## 证书\nTomcat要求的是包含签名过证书的keystore文件和keystore密码。所以我们要先把证书导入keystore\n```\n$JAVA_HOME/bin/keytool -import -alias oschina -trustcacerts -file oschina.p7s  -keystore oschina.keystore\n```\n上面的命令中 alias “oschina” 和之前申请证书的时候输入的 alias 要一致。\n## 修改Tomcat配置\n```\n<Connector SSLEnabled=\"true\" acceptCount=\"100\" clientAuth=\"false\"\n        disableUploadTimeout=\"true\" enableLookups=\"false\" maxThreads=\"25\"\n        port=\"8443\" keystoreFile=\"/oschina/webapp/oschina.keystore\" keystorePass=\"xxxxxxx\"\n        protocol=\"org.apache.coyote.http11.Http11NioProtocol\" scheme=\"https\"\n        secure=\"true\" sslProtocol=\"TLS\" />\n```\n","source":"_posts/https.md","raw":"title: Nginx+Tomcat 配置 https\ndate: 2015-10-13 16:13:45\ncategories: 技术\n---\n# SSL/TLS简介\n安全传输层协议（TLS）与其前辈加密套接字（SSL）都是用于保证 Web 浏览器与 Web 服务器通过安全连接进行通信的技术。利用这些技术，我们所要传送的数据会在一端进行加密，传输到另一端后再进行解密（在处理数据之前）。这是一种双向的操作，服务器和浏览器都能在发送数据前对它们进行加密处理。\n\nSSL/TLS 协议的另一个重要方面是认证。当我们初始通过安全连接与 Web 服务器进行通信时，服务器将提供给 Web 浏览器一组“证书”形式的凭证，用来证明站点的归属方以及站点的具体声明。某些情况下，服务器也会请求浏览器出示证书，来证明作为操作者的“你”所宣称的身份是否属实。这种证书叫做“客户端证书”，但事实上它更多地用于 B2B（企业对企业电子商务）的交易中，而并非针对个人用户。大多数启用了 SSL 协议的 Web 服务器都不需要客户端认证。\n\n# 证书申请\n## 使用 OpenSSL 生成 SSL Key 和 CSR\n\n域名，也称为 Common Name，因为特殊的证书不一定是域名：example.com\n\n组织或公司名字（Organization）：Example, Inc.\n\n部门（Department）：可以不填写，这里我们写 Web Security\n\n城市（City）：Beijing\n\n省份（State / Province）：Beijing\n\n国家（Country）：CN\n\n加密强度：2048 位，如果你的机器性能强劲，也可以选择 4096 位\n\n按照以上信息，使用 OpenSSL 生成 key 和 csr 的命令如下\n\n```\nopenssl req -new -newkey rsa:2048 -sha256 -nodes -out example_com.csr -keyout example_com.key -subj \"/C=CN/ST=Beijing/L=Beijing/O=Example Inc./OU=Web Security/CN=example.com\"  \n```\nPS：如果是泛域名证书，则应该填写*.example.com\n你可以在系统的任何地方运行这个命令，会自动在当前目录生成 example_com.csr 和 example_com.key 这两个文件\n这个 CSR 文件就是你需要提交给 SSL 认证机构的，当你的域名或组织通过验证后，认证机构就会颁发给你一个 example_com.crt\n而 example_com.key 是需要用在 Nginx 配置里和 example_com.crt 配合使用的，需要好好保管，千万别泄露给任何第三方。\n\n[b0a12fd3]: http://www.oschina.net/p/java-exportpriv \"java-exportpriv\"\n\n# Nginx\n## 证书处理\nNginx和Tomcat不一样，它要求的是证书文件 .crt 和私钥 .key 。遗憾的是，我们的私钥在keystore里面，而JDK自带的keytool并不提供私钥的导出功能，所以我们得借助第三方工具来导出私钥。\n### 1. 导出私钥\n有一个开源的私钥导出工具叫做 [java-exportpriv][b0a12fd3] 。它是一个简单的java程序，你下载以后参考它的说明，编译，然后运行即可，非常简单，我就不多罗嗦了。\n### 2. 创建 crt\n和Apache不一样，Nginx没有Certificat Chain这个参数，所以你要把你的证书和中间证书合并。合并证书很简单，创建一个先的文件 oschina-chain.crt，内容如下：\n```\n-----BEGIN CERTIFICATE-----\n这里是你证书的内容\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\n这里是中间证书的内容\n-----END CERTIFICATE-----\n```\n## 修改配置\n```\nserver {\n      listen       443 ssl;\n      server_name  localhost;\n      ssl                  on;\n      ssl_certificate      /oschina/webapp/oschina-chain.crt;\n      ssl_certificate_key  /oschina/webapp/oschina.key;\n\n  location / {\n          include proxy.conf;\n          proxy_pass   https://61.145.122.155:443;\n      }\n\n  }\n```\n## 强制 https\n```\n  server {\n      listen 80;\n      server_name localhost;\n      rewrite ^/(.*) https://$server_name/$1 permanent;\n  }\n```\n## 增强\n但是这么做并不安全，默认是 SHA-1 形式，而现在主流的方案应该都避免 SHA-1，为了确保更强的安全性，我们可以采取迪菲－赫尔曼密钥交换\n\n首先，进入 /etc/ssl/certs 目录并生成一个 dhparam.pem\n```\nopenssl dhparam -out dhparam.pem 2048 # 如果你的机器性能足够强大，可以用 4096 位加密  \n```\n\n生成完毕后，在 Nginx 的 SSL 配置后面加入\n```\n        ssl_prefer_server_ciphers on;\n        ssl_dhparam /etc/ssl/certs/dhparam.pem;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n        ssl_ciphers \"EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS !RC4\";\n        keepalive_timeout 70;\n        ssl_session_cache shared:SSL:10m;\n        ssl_session_timeout 10m;\n```\n同时，如果是全站 HTTPS 并且不考虑 HTTP 的话，可以加入 HSTS 告诉你的浏览器本网站全站加密，并且强制用 HTTPS 访问\n```\n        add_header Strict-Transport-Security max-age=63072000;\n        add_header X-Frame-Options DENY;\n        add_header X-Content-Type-Options nosniff;\n```\n\n# Tomcat\n## 证书\nTomcat要求的是包含签名过证书的keystore文件和keystore密码。所以我们要先把证书导入keystore\n```\n$JAVA_HOME/bin/keytool -import -alias oschina -trustcacerts -file oschina.p7s  -keystore oschina.keystore\n```\n上面的命令中 alias “oschina” 和之前申请证书的时候输入的 alias 要一致。\n## 修改Tomcat配置\n```\n<Connector SSLEnabled=\"true\" acceptCount=\"100\" clientAuth=\"false\"\n        disableUploadTimeout=\"true\" enableLookups=\"false\" maxThreads=\"25\"\n        port=\"8443\" keystoreFile=\"/oschina/webapp/oschina.keystore\" keystorePass=\"xxxxxxx\"\n        protocol=\"org.apache.coyote.http11.Http11NioProtocol\" scheme=\"https\"\n        secure=\"true\" sslProtocol=\"TLS\" />\n```\n","slug":"https","published":1,"updated":"2015-10-14T04:11:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cijbm5x8b0003lipyb9e5srvn"},{"layout":"post","title":"Flask入坑指南","date":"2016-01-11T16:00:00.000Z","_content":"# Flask\n## Session\nFlask默认 Session 是基于浏览器 Cookie 的，这样很多从 J2EE 转过来的程序员第一次必然掉坑。Flask 官方给了多种解决方案，具体可以参考 [Sessions](http://flask.pocoo.org/snippets/category/sessions/)。其中基于Redis和 mongodb 的方案比较适合分布式部署。当然你也可以参考里面的实现，按照自己的情况来处理 Session。\n## Json返回值\n1. FLask出于安全原因不允许返回 Array，只能返回 Object。具体原因参见 [json-security](http://flask.pocoo.org/docs/0.10/security/#json-security)\n2. 默认无法序列化 Decimal。\n解决办法：安装 simplejson\n\n# Flask-SQLAlchemy/SQLAlchemy\n## 同一个事物中 Query 会自动触发 commit\n这个问题严格上说不是 Flask 的，实际是SQLAlchemy的。默认 DB 的 Session 是Autoflash的，这样当你在同一个事物中，既有 update 又有 select 操作的时候，就会出现各种灵异错误。解决办法是使用no_autoflush.\n```\nwith db.session.no_autoflush:\n    room = Room.query.get(pre_order_info.roomId)\n```\n## Model无法序列化成 json\nmodel 类继承AutoSerialize，然后转json时调用get_public方法\n```\nclass AutoSerialize(object):\n    'Mixin for retrieving public fields of model in json-compatible format'\n    __public__ = None\n\n    def get_public(self, exclude=(), extra=()):\n        \"Returns model's PUBLIC data for jsonify\"\n        data = {}\n        keys = self._sa_instance_state.attrs.items()\n        public = self.__public__ + extra if self.__public__ else extra\n        for k, field in keys:\n            if public and k not in public: continue\n            if k in exclude: continue\n            value = self._serialize(field.value)\n            if value:\n                data[k] = value\n        return data\n\n    @classmethod\n    def _serialize(cls, value, follow_fk=False):\n        if isinstance(value, datetime.datetime):\n            ret = value.strftime('%Y-%m-%d %H:%M:%S')\n        elif isinstance(value, Decimal):\n            ret = str(value)\n        elif hasattr(value, '__iter__'):\n            ret = []\n            for v in value:\n                ret.append(cls._serialize(v))\n        elif AutoSerialize in value.__class__.__bases__:\n            ret = value.get_public()\n        else:\n            ret = value\n\n        return ret\n```\n# Flask-Auth\n许久不更新，与最新版的 Flask 不兼容。这个包本身的设计比较轻巧，此外对于权限的配置是以 Resource+Operation 方式来配置，比较灵活，还是值得一用的。具体修改如下：\n# Flask-WTF/WTForms\n1. 注意表单类的基类From，要引用flask_wtf中，其在原有WTForms增强了功能。\n2. 对于SelectField类型，无法传空值。会导致validate无法通过。\n","source":"_posts/2016/flask-bugs.md","raw":"layout: post\ntitle: \"Flask入坑指南\"\ndate: \"2016-01-12 00:00\"\ncategories: 技术\n---\n# Flask\n## Session\nFlask默认 Session 是基于浏览器 Cookie 的，这样很多从 J2EE 转过来的程序员第一次必然掉坑。Flask 官方给了多种解决方案，具体可以参考 [Sessions](http://flask.pocoo.org/snippets/category/sessions/)。其中基于Redis和 mongodb 的方案比较适合分布式部署。当然你也可以参考里面的实现，按照自己的情况来处理 Session。\n## Json返回值\n1. FLask出于安全原因不允许返回 Array，只能返回 Object。具体原因参见 [json-security](http://flask.pocoo.org/docs/0.10/security/#json-security)\n2. 默认无法序列化 Decimal。\n解决办法：安装 simplejson\n\n# Flask-SQLAlchemy/SQLAlchemy\n## 同一个事物中 Query 会自动触发 commit\n这个问题严格上说不是 Flask 的，实际是SQLAlchemy的。默认 DB 的 Session 是Autoflash的，这样当你在同一个事物中，既有 update 又有 select 操作的时候，就会出现各种灵异错误。解决办法是使用no_autoflush.\n```\nwith db.session.no_autoflush:\n    room = Room.query.get(pre_order_info.roomId)\n```\n## Model无法序列化成 json\nmodel 类继承AutoSerialize，然后转json时调用get_public方法\n```\nclass AutoSerialize(object):\n    'Mixin for retrieving public fields of model in json-compatible format'\n    __public__ = None\n\n    def get_public(self, exclude=(), extra=()):\n        \"Returns model's PUBLIC data for jsonify\"\n        data = {}\n        keys = self._sa_instance_state.attrs.items()\n        public = self.__public__ + extra if self.__public__ else extra\n        for k, field in keys:\n            if public and k not in public: continue\n            if k in exclude: continue\n            value = self._serialize(field.value)\n            if value:\n                data[k] = value\n        return data\n\n    @classmethod\n    def _serialize(cls, value, follow_fk=False):\n        if isinstance(value, datetime.datetime):\n            ret = value.strftime('%Y-%m-%d %H:%M:%S')\n        elif isinstance(value, Decimal):\n            ret = str(value)\n        elif hasattr(value, '__iter__'):\n            ret = []\n            for v in value:\n                ret.append(cls._serialize(v))\n        elif AutoSerialize in value.__class__.__bases__:\n            ret = value.get_public()\n        else:\n            ret = value\n\n        return ret\n```\n# Flask-Auth\n许久不更新，与最新版的 Flask 不兼容。这个包本身的设计比较轻巧，此外对于权限的配置是以 Resource+Operation 方式来配置，比较灵活，还是值得一用的。具体修改如下：\n# Flask-WTF/WTForms\n1. 注意表单类的基类From，要引用flask_wtf中，其在原有WTForms增强了功能。\n2. 对于SelectField类型，无法传空值。会导致validate无法通过。\n","slug":"2016/flask-bugs","published":1,"updated":"2016-01-12T16:20:22.000Z","comments":1,"photos":[],"link":"","_id":"cijbm5x8e0006lipy0f0juo9k"},{"layout":"post","title":"杂记","date":"2015-10-22T02:16:00.000Z","_content":"\n- 京城米贵，居之不易，多少强颜欢笑的背后，都是紧咬的牙关。--普通朋友\n- 人啊，整天算计来算计去，累不累啊。\n- 你最亲近的人都不能理解你支持你\n- 长眠是不是解决问题的办法\n- 对别人好一定要计较回报吗？\n","source":"_posts/2015/zaji.md","raw":"layout: post\ntitle: \"杂记\"\ndate: \"2015-10-22 10:16\"\ncategories: 杂记\n---\n\n- 京城米贵，居之不易，多少强颜欢笑的背后，都是紧咬的牙关。--普通朋友\n- 人啊，整天算计来算计去，累不累啊。\n- 你最亲近的人都不能理解你支持你\n- 长眠是不是解决问题的办法\n- 对别人好一定要计较回报吗？\n","slug":"2015/zaji","published":1,"updated":"2016-01-25T16:49:10.000Z","_id":"cijbm5x8g0008lipyyfgb8rhd","comments":1,"photos":[],"link":""},{"layout":"post","title":"微信公众号摇一摇开发","date":"2015-12-03T08:37:00.000Z","_content":"# 前言\n看了[那么多“扫一扫”，不妨“摇一摇”——微信“摇一摇周边”功能开发实录](http://yalishizhude.github.io/2015/11/17/shake-nearby/?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io)的文章，玩了一次开发。结果发现有些微信已经提供 web 方式操作，还有些逻辑说的不甚明了，所以记录下过程。\n# 先决条件\n订阅号或者服务号完成认证\n# 开通摇一摇周边功能。\n开通方式：添加功能插件->摇一摇周边->使用公众号登录->申请开通\n填写相关信息及证明文件后，等待审核。\n![](http://7xnhcl.com1.z0.glb.clouddn.com/yao-1.png)\n![](http://7xnhcl.com1.z0.glb.clouddn.com/yao-2.png)\n![](http://7xnhcl.com1.z0.glb.clouddn.com/yao-3.png)\n![](http://7xnhcl.com1.z0.glb.clouddn.com/yao-4.png)\n\n# iBeacon设备\n## 购买设备iBeacon设备。\n这个可以从淘宝上购买，也可以通过认证后，从[微信官方](https://zb.weixin.qq.com/nearby/html/guide/buyDeviceGuide.html)渠道进行购买。\n\n## 新增设备\n从周边后台添加新增设备\n![](http://7xnhcl.com1.z0.glb.clouddn.com/yao-5.png)\n由于我是自行购买设备，所以选择了方式2。之后填写需要的数量和理由后，完成申请。\n![](http://7xnhcl.com1.z0.glb.clouddn.com/yao-6.png)\n\n申请之后的设备在未激活设备处可以看到。\n![](http://7xnhcl.com1.z0.glb.clouddn.com/yao-7.png)\n查看设备信息，可以得到对应的UUID、Major、Minor信息\n![](http://7xnhcl.com1.z0.glb.clouddn.com/yao-8.png)\n\n## 配置设备\n使用厂家提供的工具将上面获得的UUID、Major、Minor写入设备\n\n## 激活设备\n保证设备电源处于开启状态，打开手机蓝牙，打开微信摇一摇功能，选择周边，然后摇，能够发现设备，点击后，可完成激活。完成后，可在[周边后台](https://zb.weixin.qq.com/nearby/html/device/manage.html)看到设备状态。具体可以参考[设备配置指引](https://zb.weixin.qq.com/nearby/instruction.xhtml?section=4) [如何激活设备？](https://zb.weixin.qq.com/nearby/instruction.xhtml?section=5)\n# 页面配置\n点击页面管理、新建页面、选择配置设备\n","source":"_posts/2015/wechat-yao.md","raw":"layout: post\ntitle: \"微信公众号摇一摇开发\"\ndate: \"2015-12-03 16:37\"\ncategories: 技术\n---\n# 前言\n看了[那么多“扫一扫”，不妨“摇一摇”——微信“摇一摇周边”功能开发实录](http://yalishizhude.github.io/2015/11/17/shake-nearby/?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io)的文章，玩了一次开发。结果发现有些微信已经提供 web 方式操作，还有些逻辑说的不甚明了，所以记录下过程。\n# 先决条件\n订阅号或者服务号完成认证\n# 开通摇一摇周边功能。\n开通方式：添加功能插件->摇一摇周边->使用公众号登录->申请开通\n填写相关信息及证明文件后，等待审核。\n![](http://7xnhcl.com1.z0.glb.clouddn.com/yao-1.png)\n![](http://7xnhcl.com1.z0.glb.clouddn.com/yao-2.png)\n![](http://7xnhcl.com1.z0.glb.clouddn.com/yao-3.png)\n![](http://7xnhcl.com1.z0.glb.clouddn.com/yao-4.png)\n\n# iBeacon设备\n## 购买设备iBeacon设备。\n这个可以从淘宝上购买，也可以通过认证后，从[微信官方](https://zb.weixin.qq.com/nearby/html/guide/buyDeviceGuide.html)渠道进行购买。\n\n## 新增设备\n从周边后台添加新增设备\n![](http://7xnhcl.com1.z0.glb.clouddn.com/yao-5.png)\n由于我是自行购买设备，所以选择了方式2。之后填写需要的数量和理由后，完成申请。\n![](http://7xnhcl.com1.z0.glb.clouddn.com/yao-6.png)\n\n申请之后的设备在未激活设备处可以看到。\n![](http://7xnhcl.com1.z0.glb.clouddn.com/yao-7.png)\n查看设备信息，可以得到对应的UUID、Major、Minor信息\n![](http://7xnhcl.com1.z0.glb.clouddn.com/yao-8.png)\n\n## 配置设备\n使用厂家提供的工具将上面获得的UUID、Major、Minor写入设备\n\n## 激活设备\n保证设备电源处于开启状态，打开手机蓝牙，打开微信摇一摇功能，选择周边，然后摇，能够发现设备，点击后，可完成激活。完成后，可在[周边后台](https://zb.weixin.qq.com/nearby/html/device/manage.html)看到设备状态。具体可以参考[设备配置指引](https://zb.weixin.qq.com/nearby/instruction.xhtml?section=4) [如何激活设备？](https://zb.weixin.qq.com/nearby/instruction.xhtml?section=5)\n# 页面配置\n点击页面管理、新建页面、选择配置设备\n","slug":"2015/wechat-yao","published":1,"updated":"2015-12-04T07:28:59.000Z","comments":1,"photos":[],"link":"","_id":"cijbm5x8i000blipyyvaioks6"},{"layout":"post","title":"spring动态数据源","date":"2015-12-04T06:29:00.000Z","_content":"# 核心思想\n通过使用Spring提供的AbstractRoutingDataSource替代原有 dataSource，在每次操作数据库的时候通过类中的determineTargetDataSource()方法获取当前数据源。这样我们就可以通过切面技术，在不同的切面，切入不同的数据源名称，使Spring获取的时候拿到的是不同的数据源。就相当于在多个 dataSource前面增加了一个路由层。\n# 基础用法\n## 原理\n通过查看AbstractRoutingDataSource的determineTargetDataSource实现，可以发现基本原理就是通过determineCurrentLookupKey()获取当前数据源的 key，然后从resolvedDataSources获取对应数据源并返回。无法获取则返回默认配置数据源。而resolvedDataSources是通过targetDataSources初始化的。也就是说，我们在使用中配置两个地方。\n1. defaultTargetDataSource\n2. targetDataSources\n```\n\tpublic void afterPropertiesSet() {\n\t\tif (this.targetDataSources == null) {\n\t\t\tthrow new IllegalArgumentException(\"Property 'targetDataSources' is required\");\n\t\t}\n\t\tthis.resolvedDataSources = new HashMap<Object, DataSource>(this.targetDataSources.size());\n\t\tfor (Map.Entry<Object, Object> entry : this.targetDataSources.entrySet()) {\n\t\t\tObject lookupKey = resolveSpecifiedLookupKey(entry.getKey());\n\t\t\tDataSource dataSource = resolveSpecifiedDataSource(entry.getValue());\n\t\t\tthis.resolvedDataSources.put(lookupKey, dataSource);\n\t\t}\n\t\tif (this.defaultTargetDataSource != null) {\n\t\t\tthis.resolvedDefaultDataSource = resolveSpecifiedDataSource(this.defaultTargetDataSource);\n\t\t}\n\t}\n```\n```\n    protected DataSource determineTargetDataSource() {\n\t\tAssert.notNull(this.resolvedDataSources, \"DataSource router not initialized\");\n\t\tObject lookupKey = determineCurrentLookupKey();\n\t\tDataSource dataSource = this.resolvedDataSources.get(lookupKey);\n\t\tif (dataSource == null && (this.lenientFallback || lookupKey == null)) {\n\t\t\tdataSource = this.resolvedDefaultDataSource;\n\t\t}\n\t\tif (dataSource == null) {\n\t\t\tthrow new IllegalStateException(\"Cannot determine target DataSource for lookup key [\" + lookupKey + \"]\");\n\t\t}\n\t\treturn dataSource;\n\t}\n```\n## 步骤1\n通过 ThreadLocal 记录获取当前使用的数据源 Key\n```\npublic class DataSourceHolder {\n    //线程本地环境\n    private static final ThreadLocal<String> dataSources = new ThreadLocal<String>();\n    //设置数据源\n    public static void setDataSource(String customerType) {\n        dataSources.set(customerType);\n    }\n    //获取数据源\n    public static String getDataSource() {\n        return (String) dataSources.get();\n    }\n    //清除数据源\n    public static void clearDataSource() {\n        dataSources.remove();\n    }\n}\n```\n\n## 步骤2\n实现AbstractRoutingDataSource\n```\npublic class DynamicDataSource extends AbstractRoutingDataSource {\n\n    @Override\n    protected Object determineCurrentLookupKey() {\n        return DataSourceHolder.getDataSource();\n    }\n}\n```\n## 步骤3\n配置 spring 文件\n```\n<bean id=\"adamDataSource1\" class=\"com.alibaba.druid.pool.DruidDataSource\"\n          destroy-method=\"close\">\n    <property name=\"url\" value=\"jdbc:mysql://localhost:3306/am?useUnicode=true&amp;characterEncoding=utf8\"/>\n    <property name=\"username\" value=\"root\" />\n    <property name=\"password\" value=\"root\" />\n    <property name=\"filters\" value=\"stat\" />\n    <property name=\"maxActive\" value=\"500\" />\n    <property name=\"initialSize\" value=\"10\" />\n    <property name=\"maxWait\" value=\"60000\" />\n    <property name=\"minIdle\" value=\"10\" />\n    <property name=\"timeBetweenEvictionRunsMillis\" value=\"60000\" />\n    <property name=\"minEvictableIdleTimeMillis\" value=\"300000\" />\n    <property name=\"validationQuery\" value=\"SELECT 'x'\" />\n    <property name=\"testWhileIdle\" value=\"true\" />\n    <property name=\"testOnBorrow\" value=\"false\" />\n    <property name=\"testOnReturn\" value=\"false\" />\n</bean>\n<bean id=\"adamDataSource2\" class=\"com.alibaba.druid.pool.DruidDataSource\"\n          destroy-method=\"close\">\n    <property name=\"url\" value=\"jdbc:mysql://localhost:3306/am2?useUnicode=true&amp;characterEncoding=utf8\"/>\n    <property name=\"username\" value=\"root\" />\n    <property name=\"password\" value=\"root\" />\n    <property name=\"filters\" value=\"stat\" />\n    <property name=\"maxActive\" value=\"500\" />\n    <property name=\"initialSize\" value=\"10\" />\n    <property name=\"maxWait\" value=\"60000\" />\n    <property name=\"minIdle\" value=\"10\" />\n    <property name=\"timeBetweenEvictionRunsMillis\" value=\"60000\" />\n    <property name=\"minEvictableIdleTimeMillis\" value=\"300000\" />\n    <property name=\"validationQuery\" value=\"SELECT 'x'\" />\n    <property name=\"testWhileIdle\" value=\"true\" />\n    <property name=\"testOnBorrow\" value=\"false\" />\n    <property name=\"testOnReturn\" value=\"false\" />\n</bean>\n\n<bean id=\"dataSource\" class=\"com.guall.dao.DynamicDataSource\">\n    <property name=\"targetDataSources\">\n    <map key-type=\"java.lang.String\">\n       <entry key=\"adamDataSource1\" value-ref=\"adamDataSource1\"></entry>\n       <entry key=\"adamDataSource2\" value-ref=\"adamDataSource2\"></entry>\n    </map>\n    </property>\n    <!-- 默认目标数据源为你主库数据源 -->\n    <property name=\"defaultTargetDataSource\" ref=\"adamDataSource\"/>\n</bean>\n<bean id=\"adamJdbcTemplate\" class=\"org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate\">\n    <constructor-arg name=\"dataSource\" ref=\"dataSource\"/>\n</bean>\n<bean id=\"sessionFactory\" class=\"org.springframework.orm.hibernate4.LocalSessionFactoryBean\">\n    <property name=\"dataSource\" ref=\"dataSource\" />\n    <property name=\"hibernateProperties\">\n        <props>\n            <prop key=\"hibernate.dialect\">org.hibernate.dialect.MySQLDialect</prop>\n            <prop key=\"hibernate.hbm2ddl.auto\">update</prop>\n            <prop key=\"hibernate.show_sql\">true</prop>\n            <prop key=\"hibernate.format_sql\">true</prop>\n        </props>\n    </property>\n</bean>\n```\n## 步骤4\n前三步已经完成了所有的准备工作，剩下的就是在采取不同的方式，根据需要来切换数据源了。可以用到的方式，如 Filter、Interceptor、AOP 等。\n\n# 高级用法\n不预先配置多种数据源，通过重写determineTargetDataSource方法，按照自己的方式进行数据源的创建和获取操作。\n","source":"_posts/2015/spring-dynamic-datasource.md","raw":"layout: post\ntitle: \"spring动态数据源\"\ndate: \"2015-12-04 14:29\"\ncategories: 技术\n---\n# 核心思想\n通过使用Spring提供的AbstractRoutingDataSource替代原有 dataSource，在每次操作数据库的时候通过类中的determineTargetDataSource()方法获取当前数据源。这样我们就可以通过切面技术，在不同的切面，切入不同的数据源名称，使Spring获取的时候拿到的是不同的数据源。就相当于在多个 dataSource前面增加了一个路由层。\n# 基础用法\n## 原理\n通过查看AbstractRoutingDataSource的determineTargetDataSource实现，可以发现基本原理就是通过determineCurrentLookupKey()获取当前数据源的 key，然后从resolvedDataSources获取对应数据源并返回。无法获取则返回默认配置数据源。而resolvedDataSources是通过targetDataSources初始化的。也就是说，我们在使用中配置两个地方。\n1. defaultTargetDataSource\n2. targetDataSources\n```\n\tpublic void afterPropertiesSet() {\n\t\tif (this.targetDataSources == null) {\n\t\t\tthrow new IllegalArgumentException(\"Property 'targetDataSources' is required\");\n\t\t}\n\t\tthis.resolvedDataSources = new HashMap<Object, DataSource>(this.targetDataSources.size());\n\t\tfor (Map.Entry<Object, Object> entry : this.targetDataSources.entrySet()) {\n\t\t\tObject lookupKey = resolveSpecifiedLookupKey(entry.getKey());\n\t\t\tDataSource dataSource = resolveSpecifiedDataSource(entry.getValue());\n\t\t\tthis.resolvedDataSources.put(lookupKey, dataSource);\n\t\t}\n\t\tif (this.defaultTargetDataSource != null) {\n\t\t\tthis.resolvedDefaultDataSource = resolveSpecifiedDataSource(this.defaultTargetDataSource);\n\t\t}\n\t}\n```\n```\n    protected DataSource determineTargetDataSource() {\n\t\tAssert.notNull(this.resolvedDataSources, \"DataSource router not initialized\");\n\t\tObject lookupKey = determineCurrentLookupKey();\n\t\tDataSource dataSource = this.resolvedDataSources.get(lookupKey);\n\t\tif (dataSource == null && (this.lenientFallback || lookupKey == null)) {\n\t\t\tdataSource = this.resolvedDefaultDataSource;\n\t\t}\n\t\tif (dataSource == null) {\n\t\t\tthrow new IllegalStateException(\"Cannot determine target DataSource for lookup key [\" + lookupKey + \"]\");\n\t\t}\n\t\treturn dataSource;\n\t}\n```\n## 步骤1\n通过 ThreadLocal 记录获取当前使用的数据源 Key\n```\npublic class DataSourceHolder {\n    //线程本地环境\n    private static final ThreadLocal<String> dataSources = new ThreadLocal<String>();\n    //设置数据源\n    public static void setDataSource(String customerType) {\n        dataSources.set(customerType);\n    }\n    //获取数据源\n    public static String getDataSource() {\n        return (String) dataSources.get();\n    }\n    //清除数据源\n    public static void clearDataSource() {\n        dataSources.remove();\n    }\n}\n```\n\n## 步骤2\n实现AbstractRoutingDataSource\n```\npublic class DynamicDataSource extends AbstractRoutingDataSource {\n\n    @Override\n    protected Object determineCurrentLookupKey() {\n        return DataSourceHolder.getDataSource();\n    }\n}\n```\n## 步骤3\n配置 spring 文件\n```\n<bean id=\"adamDataSource1\" class=\"com.alibaba.druid.pool.DruidDataSource\"\n          destroy-method=\"close\">\n    <property name=\"url\" value=\"jdbc:mysql://localhost:3306/am?useUnicode=true&amp;characterEncoding=utf8\"/>\n    <property name=\"username\" value=\"root\" />\n    <property name=\"password\" value=\"root\" />\n    <property name=\"filters\" value=\"stat\" />\n    <property name=\"maxActive\" value=\"500\" />\n    <property name=\"initialSize\" value=\"10\" />\n    <property name=\"maxWait\" value=\"60000\" />\n    <property name=\"minIdle\" value=\"10\" />\n    <property name=\"timeBetweenEvictionRunsMillis\" value=\"60000\" />\n    <property name=\"minEvictableIdleTimeMillis\" value=\"300000\" />\n    <property name=\"validationQuery\" value=\"SELECT 'x'\" />\n    <property name=\"testWhileIdle\" value=\"true\" />\n    <property name=\"testOnBorrow\" value=\"false\" />\n    <property name=\"testOnReturn\" value=\"false\" />\n</bean>\n<bean id=\"adamDataSource2\" class=\"com.alibaba.druid.pool.DruidDataSource\"\n          destroy-method=\"close\">\n    <property name=\"url\" value=\"jdbc:mysql://localhost:3306/am2?useUnicode=true&amp;characterEncoding=utf8\"/>\n    <property name=\"username\" value=\"root\" />\n    <property name=\"password\" value=\"root\" />\n    <property name=\"filters\" value=\"stat\" />\n    <property name=\"maxActive\" value=\"500\" />\n    <property name=\"initialSize\" value=\"10\" />\n    <property name=\"maxWait\" value=\"60000\" />\n    <property name=\"minIdle\" value=\"10\" />\n    <property name=\"timeBetweenEvictionRunsMillis\" value=\"60000\" />\n    <property name=\"minEvictableIdleTimeMillis\" value=\"300000\" />\n    <property name=\"validationQuery\" value=\"SELECT 'x'\" />\n    <property name=\"testWhileIdle\" value=\"true\" />\n    <property name=\"testOnBorrow\" value=\"false\" />\n    <property name=\"testOnReturn\" value=\"false\" />\n</bean>\n\n<bean id=\"dataSource\" class=\"com.guall.dao.DynamicDataSource\">\n    <property name=\"targetDataSources\">\n    <map key-type=\"java.lang.String\">\n       <entry key=\"adamDataSource1\" value-ref=\"adamDataSource1\"></entry>\n       <entry key=\"adamDataSource2\" value-ref=\"adamDataSource2\"></entry>\n    </map>\n    </property>\n    <!-- 默认目标数据源为你主库数据源 -->\n    <property name=\"defaultTargetDataSource\" ref=\"adamDataSource\"/>\n</bean>\n<bean id=\"adamJdbcTemplate\" class=\"org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate\">\n    <constructor-arg name=\"dataSource\" ref=\"dataSource\"/>\n</bean>\n<bean id=\"sessionFactory\" class=\"org.springframework.orm.hibernate4.LocalSessionFactoryBean\">\n    <property name=\"dataSource\" ref=\"dataSource\" />\n    <property name=\"hibernateProperties\">\n        <props>\n            <prop key=\"hibernate.dialect\">org.hibernate.dialect.MySQLDialect</prop>\n            <prop key=\"hibernate.hbm2ddl.auto\">update</prop>\n            <prop key=\"hibernate.show_sql\">true</prop>\n            <prop key=\"hibernate.format_sql\">true</prop>\n        </props>\n    </property>\n</bean>\n```\n## 步骤4\n前三步已经完成了所有的准备工作，剩下的就是在采取不同的方式，根据需要来切换数据源了。可以用到的方式，如 Filter、Interceptor、AOP 等。\n\n# 高级用法\n不预先配置多种数据源，通过重写determineTargetDataSource方法，按照自己的方式进行数据源的创建和获取操作。\n","slug":"2015/spring-dynamic-datasource","published":1,"updated":"2015-12-04T06:55:30.000Z","comments":1,"photos":[],"link":"","_id":"cijbm5x8k000dlipy7fwn8vea"},{"layout":"post","title":"React Native for Android 环境搭建-坑","date":"2015-10-21T09:31:00.000Z","_content":"# 准备工作\n- 操作系统：OSX\n\n# 基本环境\n## Homebrew\n### 新安装\n```\nruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n### 已安装-<font color=\"red\">务必更新</font>\n```\ncd /usr/loacl\ngit fetch origin\ngit reset --hard origin/master\nbrew update\n```\n## Nodejs\n### 安装 nvm\n```\nbrew install curl  # 确保安装了 curl\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.29.0/install.sh | bash\n```\n### 安装 Nodejs\n此处需要安装4.0以上版本\n```\nnvm install node && nvm alias default node\n```\n### NPM 国内源\n```\nnpm config set registry https://registry.npm.taobao.org\nnpm config set disturl https://npm.taobao.org/dist\n```\n## watchman\n[watchman](https://facebook.github.io/watchman/docs/install.html) 是 Facebook 的一个用于监控文件变更并触发指定操作的工具：\n```\nbrew install watchman\n```\n## flow\n[Flow](http://flowtype.org/) 是一个 JavaScript 的静态类型检查器，建议安装它，以方便找出代码中可能存在的类型错误：\n\n```\nbrew install flow\n```\n## Android SDK\n### SDK:\n- Android SDK Tools\n- Android SDK Platform-tools\n- Android SDK Build-tools\n- Android SDK Platform\n- Android Support Repository\n### 模拟器\n- API 19以上\n### 环境变量\n- ANDROID_SDK\n- ANDROID_NDK\n\n详细介绍可以参考 [这篇文章](http://wiki.jikexueyuan.com/project/react-native/DevelopmentSetupAndroid.html) 。\n## React Native\n```\nnpm install -g react-native-cli\n```\n# 使用步骤\n## 新建工程\n```\nreact-native init demoProject\n```\n## 运行工程\n```\nreact-native run-android\n```\n## 常见问题\n### 启动速度慢\nAndroid App使用 gradle 打包，在第一次启动时，会下载 gradle 和相应的依赖包，所以会造成启动速度缓慢。可以自行修改 app 中 /android/gradle.properties的配置，使用本地已经配置好的环境优化启动速度。\n### 端口占用\n如果 Running Packager 提示 “Packager can’t listen on port 8081” ，说明 8081 端口被占用，可以检查是什么程序占用了这个端口并杀掉它：\n```\n$ sudo lsof -n -i4TCP:8081 | grep LISTEN\n$ kill -9 <进程id>\n```\n### 加载失败\n![加载失败](http://7xnhcl.com1.z0.glb.clouddn.com/post-react-android-1.png)\n你还需要进行如下设置：\n\n- 更新 brew 和 watchman ：brew update && brew upgrade watchman；参考 brew 安装中的说明\n- 按下菜单按钮呼出菜单\n![菜单](http://7xnhcl.com1.z0.glb.clouddn.com/post-react-android-2.png)\n然后点击【Dev Settings】菜单项进入应用的选项界面，再点击【Debug server host for device】选项，填入你的Mac主机的 ip，然后重启 APP ；\n![Debug server host for device](http://7xnhcl.com1.z0.glb.clouddn.com/post-react-android-3.png)\n其他选项，按需勾选。\nAuto reload on JS Change - 自动刷新界面\n\n# Example App\n## 下载\n```\ngit clone https://github.com/facebook/react-native.git\ngit checkout 0.13-stable\n```\n<font color=\"red\">注意选择稳定分支，不要使用 master 分支</font>\n## 运行\nExmaple App 中，Movies 和 UIExplorer 两个是 IOS 和 Android 都可以的，剩下俩个都是只有 IOS 版本的。这两个 APP 和上面说的通过 `react-native init`方式创建的不同，需要使用不同的方式来启动。\n[详情](https://github.com/facebook/react-native/tree/master/ReactAndroid#prerequisites)\n### 安装依赖\n- react-native依赖\n```\ncd react-native\nnpm install\n```\n- Android\n需要 SDK、Build-tools、NDK、Emulator\n\n### 编译基础\n```\ncd react-native\n./gradlew :ReactAndroid:assembleDebug\n```\n### 编译运行\n编译过程中需要下载依赖包，所以要耐心等待。\n- UIExplorer\n```\ncd react-native\n./gradlew :Examples:UIExplorer:android:app:installDebug\n./package./packager/packager.sh\n```\n\n- Movies\n```\ncd react-native\n./gradlew :Examples:Movies:android:app:installDebug\n./package./packager/packager.sh\n```\n","source":"_posts/2015/react-native-for-android--.md","raw":"layout: post\ntitle: \"React Native for Android 环境搭建-坑\"\ndate: \"2015-10-21 17:31\"\ncategories: 技术\n---\n# 准备工作\n- 操作系统：OSX\n\n# 基本环境\n## Homebrew\n### 新安装\n```\nruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n### 已安装-<font color=\"red\">务必更新</font>\n```\ncd /usr/loacl\ngit fetch origin\ngit reset --hard origin/master\nbrew update\n```\n## Nodejs\n### 安装 nvm\n```\nbrew install curl  # 确保安装了 curl\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.29.0/install.sh | bash\n```\n### 安装 Nodejs\n此处需要安装4.0以上版本\n```\nnvm install node && nvm alias default node\n```\n### NPM 国内源\n```\nnpm config set registry https://registry.npm.taobao.org\nnpm config set disturl https://npm.taobao.org/dist\n```\n## watchman\n[watchman](https://facebook.github.io/watchman/docs/install.html) 是 Facebook 的一个用于监控文件变更并触发指定操作的工具：\n```\nbrew install watchman\n```\n## flow\n[Flow](http://flowtype.org/) 是一个 JavaScript 的静态类型检查器，建议安装它，以方便找出代码中可能存在的类型错误：\n\n```\nbrew install flow\n```\n## Android SDK\n### SDK:\n- Android SDK Tools\n- Android SDK Platform-tools\n- Android SDK Build-tools\n- Android SDK Platform\n- Android Support Repository\n### 模拟器\n- API 19以上\n### 环境变量\n- ANDROID_SDK\n- ANDROID_NDK\n\n详细介绍可以参考 [这篇文章](http://wiki.jikexueyuan.com/project/react-native/DevelopmentSetupAndroid.html) 。\n## React Native\n```\nnpm install -g react-native-cli\n```\n# 使用步骤\n## 新建工程\n```\nreact-native init demoProject\n```\n## 运行工程\n```\nreact-native run-android\n```\n## 常见问题\n### 启动速度慢\nAndroid App使用 gradle 打包，在第一次启动时，会下载 gradle 和相应的依赖包，所以会造成启动速度缓慢。可以自行修改 app 中 /android/gradle.properties的配置，使用本地已经配置好的环境优化启动速度。\n### 端口占用\n如果 Running Packager 提示 “Packager can’t listen on port 8081” ，说明 8081 端口被占用，可以检查是什么程序占用了这个端口并杀掉它：\n```\n$ sudo lsof -n -i4TCP:8081 | grep LISTEN\n$ kill -9 <进程id>\n```\n### 加载失败\n![加载失败](http://7xnhcl.com1.z0.glb.clouddn.com/post-react-android-1.png)\n你还需要进行如下设置：\n\n- 更新 brew 和 watchman ：brew update && brew upgrade watchman；参考 brew 安装中的说明\n- 按下菜单按钮呼出菜单\n![菜单](http://7xnhcl.com1.z0.glb.clouddn.com/post-react-android-2.png)\n然后点击【Dev Settings】菜单项进入应用的选项界面，再点击【Debug server host for device】选项，填入你的Mac主机的 ip，然后重启 APP ；\n![Debug server host for device](http://7xnhcl.com1.z0.glb.clouddn.com/post-react-android-3.png)\n其他选项，按需勾选。\nAuto reload on JS Change - 自动刷新界面\n\n# Example App\n## 下载\n```\ngit clone https://github.com/facebook/react-native.git\ngit checkout 0.13-stable\n```\n<font color=\"red\">注意选择稳定分支，不要使用 master 分支</font>\n## 运行\nExmaple App 中，Movies 和 UIExplorer 两个是 IOS 和 Android 都可以的，剩下俩个都是只有 IOS 版本的。这两个 APP 和上面说的通过 `react-native init`方式创建的不同，需要使用不同的方式来启动。\n[详情](https://github.com/facebook/react-native/tree/master/ReactAndroid#prerequisites)\n### 安装依赖\n- react-native依赖\n```\ncd react-native\nnpm install\n```\n- Android\n需要 SDK、Build-tools、NDK、Emulator\n\n### 编译基础\n```\ncd react-native\n./gradlew :ReactAndroid:assembleDebug\n```\n### 编译运行\n编译过程中需要下载依赖包，所以要耐心等待。\n- UIExplorer\n```\ncd react-native\n./gradlew :Examples:UIExplorer:android:app:installDebug\n./package./packager/packager.sh\n```\n\n- Movies\n```\ncd react-native\n./gradlew :Examples:Movies:android:app:installDebug\n./package./packager/packager.sh\n```\n","slug":"2015/react-native-for-android--","published":1,"updated":"2015-10-22T07:51:04.000Z","comments":1,"photos":[],"link":"","_id":"cijbm5x8n000flipyspipdvts"},{"layout":"post","title":"Python Java AES","date":"2015-10-29T09:16:00.000Z","_content":"# AES\n密码学中的高级加密标准（Advanced Encryption Standard，AES），又称高级加密标准Rijndael加密法，\n是美国联邦政府采用的一种区块加密标准。这个标准用来替代原先的DES，已经被多方分析且广为全世界\n所使用。经过五年的甄选流程，高级加密标准由美国国家标准与技术研究院 （NIST）于2001年11月26日\n发布于FIPS PUB197，并在2002年5月26日成为有效的标准。2006年，高级加密标准已然成为对称密钥加密\n中最流行的算法之一。该算法为比利时密码学家Joan Daemen和VincentRijmen所设计，结合两位作者的名\n字，以Rijndael之命名之，投稿高级加密标准的甄选流程。（Rijdael的发音近于 \"Rhinedoll\"。）\n## 加密填充模式\n```\n算法/模式/填充                16字节加密后数据长度        不满16字节加密后长度\nAES/CBC/NoPadding             16                          不支持\nAES/CBC/PKCS5Padding          32                          16\nAES/CBC/ISO10126Padding       32                          16\nAES/CFB/NoPadding             16                          原始数据长度\nAES/CFB/PKCS5Padding          32                          16\nAES/CFB/ISO10126Padding       32                          16\nAES/ECB/NoPadding             16                          不支持\nAES/ECB/PKCS5Padding          32                          16\nAES/ECB/ISO10126Padding       32                          16\nAES/OFB/NoPadding             16                          原始数据长度\nAES/OFB/PKCS5Padding          32                          16\nAES/OFB/ISO10126Padding       32                          16\nAES/PCBC/NoPadding            16                          不支持\nAES/PCBC/PKCS5Padding         32                          16\nAES/PCBC/ISO10126Padding      32                          16\n\n```\n\n# ECB(Electronic Code Book电子密码本)模式\nECB模式是最早采用和最简单的模式，它将加密的数据分成若干组，每组的大小跟加密密钥长度相同，然后每组都用相同的密钥进行加密。\n**优点:**\n- 模式操作简单；\n- 有利于并行计算；\n- 误差不会被传送；\n\n**缺点:**\n- 不能隐藏明文的模式，明文中的重复内容在密文中暴露出来；\n- 可能对明文进行主动攻击；\n\n因此，此模式适于加密小消息。\n## Java\n```\nString key = \"1234567890123456\";\n\nSecretKey secretKey = new SecretKeySpec(key.getBytes(), \"AES\");\nCipher cipher = Cipher.getInstance(\"AES\");\nString data = \"abcd\";\ncipher.init(Cipher.ENCRYPT_MODE, secretKey);\nbyte[] encrypted = cipher.doFinal(data.getBytes());\nSystem.out.println(Encodes.encodeBase64(encrypted));\n\ncipher.init(Cipher.DECRYPT_MODE, secretKey);\nSystem.out.println(new String(cipher.doFinal(encrypted)));\n```\n## Python\n```\nfrom Crypto.Cipher import AES\nfrom itsdangerous import base64_encode,base64_decode\n\nBS = AES.block_size\npad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS)\nunpad = lambda s : s[0:-ord(s[-1])]\n\n# key = os.urandom(16) # the length can be (16, 24, 32)\nkey = b'1234567890123456'\ntext = 'abcd'\ncipher = AES.new(key)\nprint base64_encode(cipher.encrypt(pad(text)))\nprint cipher.decrypt(base64_decode(base64_encode(cipher.encrypt(pad(text)))))\n```\n# CBC(Cipher Block Chaining，加密块链)模式\n为了克服ECB模式的安全缺陷，设计了密码分组链接模式，它使得当同一个明文分组重复出现时产生不同的密文分组。对每个分组使用相同的密钥，加密函数的输入是当前的明文分组和前一个密文分组的异或。从效果上看，将明文分组序列的处理连接起来了。\n为了产生第一个密文分组，要使用一个初始向量IV，IV必须被发送方和接收方都知道，为了做到最大程度的安全性，IV应该和密钥一样受到保护。\nCBC模式的加加解密，要求 key 和 IV 都必须要一致\n**优点：**\n- 不容易主动攻击,安全性好于ECB,适合传输长度长的报文,是SSL、IPSec的标准。\n\n**缺点：**\n- 不利于并行计算；\n- 误差传递；\n- 需要初始化向量IV\n\n## Java\n```\nString iv=\"1234567890123456\";\nString key = \"1234567890123456\";\n\nSecretKey secretKey = new SecretKeySpec(key.getBytes(), \"AES\");\nCipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\nIvParameterSpec ivspec = new IvParameterSpec(iv.getBytes());\nString data = \"abcd\";\nint blockSize = cipher.getBlockSize();\nbyte[] dataBytes = data.getBytes();\nint plaintextLength = dataBytes.length;\nif (plaintextLength % blockSize != 0) {\n    plaintextLength = plaintextLength + (blockSize - (plaintextLength % blockSize));\n}\n\nbyte[] plaintext = new byte[plaintextLength];\nSystem.arraycopy(dataBytes, 0, plaintext, 0, dataBytes.length);\ncipher.init(Cipher.ENCRYPT_MODE, secretKey, ivspec);\nbyte[] encrypted = cipher.doFinal(plaintext);\nSystem.out.println(Encodes.encodeBase64(encrypted));\n\ncipher.init(Cipher.DECRYPT_MODE, secretKey,ivspec);\nSystem.out.println(new String(cipher.doFinal(encrypted)));\n```\n## Python\n```\nfrom Crypto.Cipher import AES\nimport os\nfrom itsdangerous import base64_encode, base64_decode\n\nBS = AES.block_size\npad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS)\nunpad = lambda s: s[0:-ord(s[-1])]\n\n# key = os.urandom(16) # the length can be (16, 24, 32)\nkey = b'1234567890123456'\ntext = 'abcd'\nIV = b'1234567890123456'\ncipher = AES.new(key, AES.MODE_CBC, IV=IV)\n\ndata = base64_encode(cipher.encrypt(pad(text)))\n\nprint data\n#\ncipher = AES.new(key, AES.MODE_CBC, IV=IV)\nprint cipher.decrypt(base64_decode(data))\n```\n","source":"_posts/2015/python-java-aes.md","raw":"layout: post\ntitle: \"Python Java AES\"\ndate: \"2015-10-29 17:16\"\ncategories: 技术\n---\n# AES\n密码学中的高级加密标准（Advanced Encryption Standard，AES），又称高级加密标准Rijndael加密法，\n是美国联邦政府采用的一种区块加密标准。这个标准用来替代原先的DES，已经被多方分析且广为全世界\n所使用。经过五年的甄选流程，高级加密标准由美国国家标准与技术研究院 （NIST）于2001年11月26日\n发布于FIPS PUB197，并在2002年5月26日成为有效的标准。2006年，高级加密标准已然成为对称密钥加密\n中最流行的算法之一。该算法为比利时密码学家Joan Daemen和VincentRijmen所设计，结合两位作者的名\n字，以Rijndael之命名之，投稿高级加密标准的甄选流程。（Rijdael的发音近于 \"Rhinedoll\"。）\n## 加密填充模式\n```\n算法/模式/填充                16字节加密后数据长度        不满16字节加密后长度\nAES/CBC/NoPadding             16                          不支持\nAES/CBC/PKCS5Padding          32                          16\nAES/CBC/ISO10126Padding       32                          16\nAES/CFB/NoPadding             16                          原始数据长度\nAES/CFB/PKCS5Padding          32                          16\nAES/CFB/ISO10126Padding       32                          16\nAES/ECB/NoPadding             16                          不支持\nAES/ECB/PKCS5Padding          32                          16\nAES/ECB/ISO10126Padding       32                          16\nAES/OFB/NoPadding             16                          原始数据长度\nAES/OFB/PKCS5Padding          32                          16\nAES/OFB/ISO10126Padding       32                          16\nAES/PCBC/NoPadding            16                          不支持\nAES/PCBC/PKCS5Padding         32                          16\nAES/PCBC/ISO10126Padding      32                          16\n\n```\n\n# ECB(Electronic Code Book电子密码本)模式\nECB模式是最早采用和最简单的模式，它将加密的数据分成若干组，每组的大小跟加密密钥长度相同，然后每组都用相同的密钥进行加密。\n**优点:**\n- 模式操作简单；\n- 有利于并行计算；\n- 误差不会被传送；\n\n**缺点:**\n- 不能隐藏明文的模式，明文中的重复内容在密文中暴露出来；\n- 可能对明文进行主动攻击；\n\n因此，此模式适于加密小消息。\n## Java\n```\nString key = \"1234567890123456\";\n\nSecretKey secretKey = new SecretKeySpec(key.getBytes(), \"AES\");\nCipher cipher = Cipher.getInstance(\"AES\");\nString data = \"abcd\";\ncipher.init(Cipher.ENCRYPT_MODE, secretKey);\nbyte[] encrypted = cipher.doFinal(data.getBytes());\nSystem.out.println(Encodes.encodeBase64(encrypted));\n\ncipher.init(Cipher.DECRYPT_MODE, secretKey);\nSystem.out.println(new String(cipher.doFinal(encrypted)));\n```\n## Python\n```\nfrom Crypto.Cipher import AES\nfrom itsdangerous import base64_encode,base64_decode\n\nBS = AES.block_size\npad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS)\nunpad = lambda s : s[0:-ord(s[-1])]\n\n# key = os.urandom(16) # the length can be (16, 24, 32)\nkey = b'1234567890123456'\ntext = 'abcd'\ncipher = AES.new(key)\nprint base64_encode(cipher.encrypt(pad(text)))\nprint cipher.decrypt(base64_decode(base64_encode(cipher.encrypt(pad(text)))))\n```\n# CBC(Cipher Block Chaining，加密块链)模式\n为了克服ECB模式的安全缺陷，设计了密码分组链接模式，它使得当同一个明文分组重复出现时产生不同的密文分组。对每个分组使用相同的密钥，加密函数的输入是当前的明文分组和前一个密文分组的异或。从效果上看，将明文分组序列的处理连接起来了。\n为了产生第一个密文分组，要使用一个初始向量IV，IV必须被发送方和接收方都知道，为了做到最大程度的安全性，IV应该和密钥一样受到保护。\nCBC模式的加加解密，要求 key 和 IV 都必须要一致\n**优点：**\n- 不容易主动攻击,安全性好于ECB,适合传输长度长的报文,是SSL、IPSec的标准。\n\n**缺点：**\n- 不利于并行计算；\n- 误差传递；\n- 需要初始化向量IV\n\n## Java\n```\nString iv=\"1234567890123456\";\nString key = \"1234567890123456\";\n\nSecretKey secretKey = new SecretKeySpec(key.getBytes(), \"AES\");\nCipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\nIvParameterSpec ivspec = new IvParameterSpec(iv.getBytes());\nString data = \"abcd\";\nint blockSize = cipher.getBlockSize();\nbyte[] dataBytes = data.getBytes();\nint plaintextLength = dataBytes.length;\nif (plaintextLength % blockSize != 0) {\n    plaintextLength = plaintextLength + (blockSize - (plaintextLength % blockSize));\n}\n\nbyte[] plaintext = new byte[plaintextLength];\nSystem.arraycopy(dataBytes, 0, plaintext, 0, dataBytes.length);\ncipher.init(Cipher.ENCRYPT_MODE, secretKey, ivspec);\nbyte[] encrypted = cipher.doFinal(plaintext);\nSystem.out.println(Encodes.encodeBase64(encrypted));\n\ncipher.init(Cipher.DECRYPT_MODE, secretKey,ivspec);\nSystem.out.println(new String(cipher.doFinal(encrypted)));\n```\n## Python\n```\nfrom Crypto.Cipher import AES\nimport os\nfrom itsdangerous import base64_encode, base64_decode\n\nBS = AES.block_size\npad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS)\nunpad = lambda s: s[0:-ord(s[-1])]\n\n# key = os.urandom(16) # the length can be (16, 24, 32)\nkey = b'1234567890123456'\ntext = 'abcd'\nIV = b'1234567890123456'\ncipher = AES.new(key, AES.MODE_CBC, IV=IV)\n\ndata = base64_encode(cipher.encrypt(pad(text)))\n\nprint data\n#\ncipher = AES.new(key, AES.MODE_CBC, IV=IV)\nprint cipher.decrypt(base64_decode(data))\n```\n","slug":"2015/python-java-aes","published":1,"updated":"2015-10-29T10:09:05.000Z","comments":1,"photos":[],"link":"","_id":"cijbm5x8q000hlipyonfdysie"},{"layout":"post","title":"nginx-lua-redis","date":"2015-10-27T09:49:00.000Z","_content":"# Ubuntu下安装\n## lua\n```\napt-get install lua5.1\napt-get install liblua5.1-dev\napt-get install liblua5.1-socket2\n```\n如果liblua5.1-socket2安装不上，需要添加源\n```\ndeb http://us.archive.ubuntu.com/ubuntu precise main universe\n```\n然后执行\n```\nsudo apt-get update\n```\n## 扩展\n### lua-redis-parser\n```\ngit clone https://github.com/agentzh/lua-redis-parser.git\nexport LUA_INCLUDE_DIR=/usr/include/lua5.1\ncd lua-redis-parser\nmake CC=gcc\nmake install CC=gcc\n```\n### json\n```\nwget http://files.luaforge.net/releases/json/json/0.9.50/json4lua-0.9.50.zip\nunzip json4lua-0.9.50.zip\ncp json4lua-0.9.50/json/json.lua /usr/share/lua/5.1/\n```\n### redis-lua\n```\ngit clone https://github.com/nrk/redis-lua.git\ncp redis-lua/src/redis.lua /usr/share/lua/5.1/\n```\n## nginx\n### module\n```\ngit clone https://github.com/simpl/ngx_devel_kit.git\ngit clone https://github.com/chaoslawful/lua-nginx-module.git\ngit clone https://github.com/agentzh/redis2-nginx-module.git\ngit clone https://github.com/agentzh/set-misc-nginx-module.git\ngit clone https://github.com/agentzh/echo-nginx-module.git\ngit clone https://github.com/catap/ngx_http_upstream_keepalive.git\n```\n### 编译依赖\n```\napt-get install libpcre3 libpcre3-dev libltdl-dev libssl-dev libjpeg62 libjpeg62-dev libpng12-0 libpng12-dev libxml2-dev libcurl4-openssl-dev libmcrypt-dev autoconf libxslt1-dev  libgeoip-dev libperl-dev -y\napt-get install libgd2-noxpm-dev -y\n```\n### 下载\n```\nwget http://nginx.org/download/nginx-1.8.0.tar.gz\ntar zxvf nginx-1.8.0.tar.gz\ncd nginx-1.8.0\n```\n### 配置\n```\n./configure --prefix=/usr/local/nginx --with-debug --with-http_addition_module \\\n--with-http_dav_module --with-http_flv_module --with-http_geoip_module \\\n--with-http_gzip_static_module --with-http_image_filter_module --with-http_perl_module \\\n--with-http_random_index_module --with-http_realip_module --with-http_secure_link_module \\\n--with-http_stub_status_module --with-http_ssl_module --with-http_sub_module \\\n--with-http_xslt_module --with-ipv6 --with-sha1=/usr/include/openssl \\\n--with-md5=/usr/include/openssl --with-mail --with-mail_ssl_module \\\n--add-module=../ngx_devel_kit \\\n--add-module=../echo-nginx-module \\\n--add-module=../lua-nginx-module \\\n--add-module=../redis2-nginx-module \\\n--add-module=../set-misc-nginx-module\n```\n### 编译安装\n```\nmake\nmake install\n```\nnginx被安装在`/usr/local/nginx` 下面,默认环境变量里面没有，需要增加连接\n```\nln -s /usr/local/nginx/sbin/nginx /usr/sbin/nginx\n```\n# 配置\n## nginx.conf\n注释掉 server块，增加引用\n```\ninclude /usr/local/etc/nginx/conf.d/*.conf;\n```\n## demo.conf\n```\nlua_package_path \"/usr/share/lua/5.1/?.lua;;\";\nserver {\n    listen 80;\n    server_name demo.local;    \n    root  html;\n\n    location /demo {\n        default_type 'text/html';\n        access_by_lua_file \"/opt/demo.lua\";\n    }\n}\n```\n## demo.lua\n```\nngx.say(\"hello,world\")\n```\n","source":"_posts/2015/nginx-lua-redis.md","raw":"layout: post\ntitle: \"nginx-lua-redis\"\ndate: \"2015-10-27 17:49\"\ncategories: 技术\n---\n# Ubuntu下安装\n## lua\n```\napt-get install lua5.1\napt-get install liblua5.1-dev\napt-get install liblua5.1-socket2\n```\n如果liblua5.1-socket2安装不上，需要添加源\n```\ndeb http://us.archive.ubuntu.com/ubuntu precise main universe\n```\n然后执行\n```\nsudo apt-get update\n```\n## 扩展\n### lua-redis-parser\n```\ngit clone https://github.com/agentzh/lua-redis-parser.git\nexport LUA_INCLUDE_DIR=/usr/include/lua5.1\ncd lua-redis-parser\nmake CC=gcc\nmake install CC=gcc\n```\n### json\n```\nwget http://files.luaforge.net/releases/json/json/0.9.50/json4lua-0.9.50.zip\nunzip json4lua-0.9.50.zip\ncp json4lua-0.9.50/json/json.lua /usr/share/lua/5.1/\n```\n### redis-lua\n```\ngit clone https://github.com/nrk/redis-lua.git\ncp redis-lua/src/redis.lua /usr/share/lua/5.1/\n```\n## nginx\n### module\n```\ngit clone https://github.com/simpl/ngx_devel_kit.git\ngit clone https://github.com/chaoslawful/lua-nginx-module.git\ngit clone https://github.com/agentzh/redis2-nginx-module.git\ngit clone https://github.com/agentzh/set-misc-nginx-module.git\ngit clone https://github.com/agentzh/echo-nginx-module.git\ngit clone https://github.com/catap/ngx_http_upstream_keepalive.git\n```\n### 编译依赖\n```\napt-get install libpcre3 libpcre3-dev libltdl-dev libssl-dev libjpeg62 libjpeg62-dev libpng12-0 libpng12-dev libxml2-dev libcurl4-openssl-dev libmcrypt-dev autoconf libxslt1-dev  libgeoip-dev libperl-dev -y\napt-get install libgd2-noxpm-dev -y\n```\n### 下载\n```\nwget http://nginx.org/download/nginx-1.8.0.tar.gz\ntar zxvf nginx-1.8.0.tar.gz\ncd nginx-1.8.0\n```\n### 配置\n```\n./configure --prefix=/usr/local/nginx --with-debug --with-http_addition_module \\\n--with-http_dav_module --with-http_flv_module --with-http_geoip_module \\\n--with-http_gzip_static_module --with-http_image_filter_module --with-http_perl_module \\\n--with-http_random_index_module --with-http_realip_module --with-http_secure_link_module \\\n--with-http_stub_status_module --with-http_ssl_module --with-http_sub_module \\\n--with-http_xslt_module --with-ipv6 --with-sha1=/usr/include/openssl \\\n--with-md5=/usr/include/openssl --with-mail --with-mail_ssl_module \\\n--add-module=../ngx_devel_kit \\\n--add-module=../echo-nginx-module \\\n--add-module=../lua-nginx-module \\\n--add-module=../redis2-nginx-module \\\n--add-module=../set-misc-nginx-module\n```\n### 编译安装\n```\nmake\nmake install\n```\nnginx被安装在`/usr/local/nginx` 下面,默认环境变量里面没有，需要增加连接\n```\nln -s /usr/local/nginx/sbin/nginx /usr/sbin/nginx\n```\n# 配置\n## nginx.conf\n注释掉 server块，增加引用\n```\ninclude /usr/local/etc/nginx/conf.d/*.conf;\n```\n## demo.conf\n```\nlua_package_path \"/usr/share/lua/5.1/?.lua;;\";\nserver {\n    listen 80;\n    server_name demo.local;    \n    root  html;\n\n    location /demo {\n        default_type 'text/html';\n        access_by_lua_file \"/opt/demo.lua\";\n    }\n}\n```\n## demo.lua\n```\nngx.say(\"hello,world\")\n```\n","slug":"2015/nginx-lua-redis","published":1,"updated":"2015-10-27T10:45:07.000Z","comments":1,"photos":[],"link":"","_id":"cijbm5x8t000jlipyirt0zjln"},{"layout":"post","title":"Mongodb和Python进行数据统计","date":"2015-10-18T01:46:00.000Z","_content":"# Group\n## Mongodb语法\n`db.collection.group({ key, reduce, initial [, keyf] [, cond] [, finalize] })`\n\nkeyf:用来对要 group 的字段进行处理，类似 sql 中通过 date 函数按日期分组\n\n详细文档：http://docs.mongodb.org/manual/reference/method/db.collection.group/\n##### 例子：\n```\ndb.orders.group(\n   {\n     key: { ord_dt: 1, 'item.sku': 1 },\n     cond: { ord_dt: { $gt: new Date( '01/01/2012' ) } },\n     reduce: function( curr, result ) {\n                 result.total += curr.item.qty;\n                 result.count++;\n             },\n     initial: { total : 0,count:0 }\n   }\n)\n```\n等价于\n```\nSELECT ord_dt, item_sku, SUM(item_qty) as total,count(0) as count\nFROM orders\nWHERE ord_dt > '01/01/2012'\nGROUP BY ord_dt, item_sku\n```\n## PyMongo语法\n```\nfrom bson.code import Code\nreducer = Code(\"\"\"\n            function( curr, result ) {\n                        result.total += curr.item.qty;\n                        result.count++;\n                    }\n\"\"\")\nresults = db.orders.group(key={\"ord_dt\": 1, \"item.sku\": 1}, condition={\"ord_dt\": { \"$gt\": \"new Date( '01/01/2012' )\" }}, initial={\"count\": 0,\"total:0\"}, reduce=reducer)\n```\n<font color=\"red\">PS:results 的结果是一个数组，这就受到 mongo 单个数据集大小的限制，最大为20000。</font>\n\n# Aggregate\n## Mongodb语法\n![图片引自 mongodb.org](http://docs.mongodb.org/manual/_images/aggregation-pipeline.png)\n上图写明了 mongo 处理聚集的方式，和 linux 中管道的理念一致，每一级的处理结果作为下一级的输入，最终完成数据的计算。\n其中$match、$group及更多参见:\n[Aggregation Pipeline Operators](http://docs.mongodb.org/manual/reference/operator/aggregation/)\n##### 例子：\n```\ndb.orders.aggregate([\n    {$match:{ord_dt: { $gt: new Date( '01/01/2012' ) }}},\n    {$group:{_id:{ ord_dt: \"$ord_dt\", sku: \"$item.sku\" },total:{$sum:\"$item.qty\"},count:{$sum:1}}},\n    {$project:{_id:0,ord_dt:\"$_id.ord_dt\",sku:\"$_id.sku\",total:1,count:1}}\n    ]\n    )\n```\n## PyMongo语法\n```\npipeline = [\n    {\"$match\":{\"ord_dt\": { \"$gt\": \"new Date( '01/01/2012' )\" }}},\n    {\"$group\": {\"_id\": {\"ord_dt\": \"$ord_dt\", \"sku\": \"$item.sku\"}, \"total\":{\"$sum\":\"$item.qty\"},\"count\": {\"$sum\": 1}}},\n    {\"$project\":{\"_id\":0,\"ord_dt\":\"$_id.ord_dt\",\"sku\":\"$_id.sku\",\"total\":1,\"count\":1}}\n]\nresult = db.requestLog.aggregate(pipeline)\n```\n\nPS:aggregate返回的是 cursor,需要进行迭代获取数据，并且可用进行分页查询\n# 杂\n## Flask中ObjectId 处理\n```\nclass ObjectIDConverter(BaseConverter):\n    def to_python(self, value):\n        try:\n            return ObjectId(base64_decode(value))\n        except (InvalidId, ValueError, TypeError):\n            raise ValidationError()\n\n    def to_url(self, value):\n        return base64_encode(value.binary)\n\n\napp.url_map.converters['objectid'] = ObjectIDConverter\n```\n","source":"_posts/2015/mongodbpython.md","raw":"layout: post\ntitle: \"Mongodb和Python进行数据统计\"\ndate: \"2015-10-18 09:46\"\ncategories: 技术\n---\n# Group\n## Mongodb语法\n`db.collection.group({ key, reduce, initial [, keyf] [, cond] [, finalize] })`\n\nkeyf:用来对要 group 的字段进行处理，类似 sql 中通过 date 函数按日期分组\n\n详细文档：http://docs.mongodb.org/manual/reference/method/db.collection.group/\n##### 例子：\n```\ndb.orders.group(\n   {\n     key: { ord_dt: 1, 'item.sku': 1 },\n     cond: { ord_dt: { $gt: new Date( '01/01/2012' ) } },\n     reduce: function( curr, result ) {\n                 result.total += curr.item.qty;\n                 result.count++;\n             },\n     initial: { total : 0,count:0 }\n   }\n)\n```\n等价于\n```\nSELECT ord_dt, item_sku, SUM(item_qty) as total,count(0) as count\nFROM orders\nWHERE ord_dt > '01/01/2012'\nGROUP BY ord_dt, item_sku\n```\n## PyMongo语法\n```\nfrom bson.code import Code\nreducer = Code(\"\"\"\n            function( curr, result ) {\n                        result.total += curr.item.qty;\n                        result.count++;\n                    }\n\"\"\")\nresults = db.orders.group(key={\"ord_dt\": 1, \"item.sku\": 1}, condition={\"ord_dt\": { \"$gt\": \"new Date( '01/01/2012' )\" }}, initial={\"count\": 0,\"total:0\"}, reduce=reducer)\n```\n<font color=\"red\">PS:results 的结果是一个数组，这就受到 mongo 单个数据集大小的限制，最大为20000。</font>\n\n# Aggregate\n## Mongodb语法\n![图片引自 mongodb.org](http://docs.mongodb.org/manual/_images/aggregation-pipeline.png)\n上图写明了 mongo 处理聚集的方式，和 linux 中管道的理念一致，每一级的处理结果作为下一级的输入，最终完成数据的计算。\n其中$match、$group及更多参见:\n[Aggregation Pipeline Operators](http://docs.mongodb.org/manual/reference/operator/aggregation/)\n##### 例子：\n```\ndb.orders.aggregate([\n    {$match:{ord_dt: { $gt: new Date( '01/01/2012' ) }}},\n    {$group:{_id:{ ord_dt: \"$ord_dt\", sku: \"$item.sku\" },total:{$sum:\"$item.qty\"},count:{$sum:1}}},\n    {$project:{_id:0,ord_dt:\"$_id.ord_dt\",sku:\"$_id.sku\",total:1,count:1}}\n    ]\n    )\n```\n## PyMongo语法\n```\npipeline = [\n    {\"$match\":{\"ord_dt\": { \"$gt\": \"new Date( '01/01/2012' )\" }}},\n    {\"$group\": {\"_id\": {\"ord_dt\": \"$ord_dt\", \"sku\": \"$item.sku\"}, \"total\":{\"$sum\":\"$item.qty\"},\"count\": {\"$sum\": 1}}},\n    {\"$project\":{\"_id\":0,\"ord_dt\":\"$_id.ord_dt\",\"sku\":\"$_id.sku\",\"total\":1,\"count\":1}}\n]\nresult = db.requestLog.aggregate(pipeline)\n```\n\nPS:aggregate返回的是 cursor,需要进行迭代获取数据，并且可用进行分页查询\n# 杂\n## Flask中ObjectId 处理\n```\nclass ObjectIDConverter(BaseConverter):\n    def to_python(self, value):\n        try:\n            return ObjectId(base64_decode(value))\n        except (InvalidId, ValueError, TypeError):\n            raise ValidationError()\n\n    def to_url(self, value):\n        return base64_encode(value.binary)\n\n\napp.url_map.converters['objectid'] = ObjectIDConverter\n```\n","slug":"2015/mongodbpython","published":1,"updated":"2015-10-18T03:09:22.000Z","comments":1,"photos":[],"link":"","_id":"cijbm5x8w000llipywkflzsp1"},{"layout":"post","title":"iOS的DeviceToken随生产环境和开发环境变化","date":"2015-10-16T09:44:00.000Z","_content":"当我用XCode直接运行到手机上的时候，Device token是以3开头的，而当我打包上传到fir.im，再下载安装的时候，Device token就变成以5开头了\n\n其实这是生产环境和开发环境的问题，在这两个环境下Device token是不同的\n\n如果你手机中的App是通过XCode直接安装的话，那么你的App就属于开发环境，想要推送成功就需要创建开发环境的证书；\n如果你的App是打包成ipa文件安装的（<font color=\"red\">不管是正式上线还是自己测试</font>），那么就是生产环境，需要创建生产环境证书，这两个环境的Device token是不同的\n","source":"_posts/2015/iosdevicetoken.md","raw":"layout: post\ntitle: \"iOS的DeviceToken随生产环境和开发环境变化\"\ndate: \"2015-10-16 17:44\"\ncategories: 技术\n---\n当我用XCode直接运行到手机上的时候，Device token是以3开头的，而当我打包上传到fir.im，再下载安装的时候，Device token就变成以5开头了\n\n其实这是生产环境和开发环境的问题，在这两个环境下Device token是不同的\n\n如果你手机中的App是通过XCode直接安装的话，那么你的App就属于开发环境，想要推送成功就需要创建开发环境的证书；\n如果你的App是打包成ipa文件安装的（<font color=\"red\">不管是正式上线还是自己测试</font>），那么就是生产环境，需要创建生产环境证书，这两个环境的Device token是不同的\n","slug":"2015/iosdevicetoken","published":1,"updated":"2015-10-18T01:46:50.000Z","comments":1,"photos":[],"link":"","_id":"cijbm5x95000nlipymcq8dg2m"},{"layout":"post","title":"hexo+github page搭建博客","date":"2015-12-04T15:07:00.000Z","_content":"# hexo安装\n## 安装 nvm\n``curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.29.0/install.sh | bash``\n## 安装 Node\n```\nnvm install node && nvm alias default node\nnvm use --delete-prefix v4.2.1 --silent\n```\n## 切换taobao 源\n```\nnpm config set registry https://registry.npm.taobao.org\nnpm config set disturl https://npm.taobao.org/dist\n```\n## 安装 hexo\n```\nnpm install -g hexo\n```\n# hexo 使用\n## 初始化\n```\nmkdir hexo\ncd hexo\nhexo init\nnpm install\n```\n## 生成文件\n```\nhexo generate\n```\n或\n```\nhexo g\n```\n## 清理文件\n```\nhexo clean\n```\n## 本地预览\n```\nhexo server\n```\n或\n```\nhexo s\n```\n","source":"_posts/2015/hexo-github-blog.md","raw":"layout: post\ntitle: \"hexo+github page搭建博客\"\ndate: \"2015-12-04 23:07\"\ncategories: 技术\n---\n# hexo安装\n## 安装 nvm\n``curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.29.0/install.sh | bash``\n## 安装 Node\n```\nnvm install node && nvm alias default node\nnvm use --delete-prefix v4.2.1 --silent\n```\n## 切换taobao 源\n```\nnpm config set registry https://registry.npm.taobao.org\nnpm config set disturl https://npm.taobao.org/dist\n```\n## 安装 hexo\n```\nnpm install -g hexo\n```\n# hexo 使用\n## 初始化\n```\nmkdir hexo\ncd hexo\nhexo init\nnpm install\n```\n## 生成文件\n```\nhexo generate\n```\n或\n```\nhexo g\n```\n## 清理文件\n```\nhexo clean\n```\n## 本地预览\n```\nhexo server\n```\n或\n```\nhexo s\n```\n","slug":"2015/hexo-github-blog","published":1,"updated":"2015-12-04T15:41:44.000Z","comments":1,"photos":[],"link":"","_id":"cijbm5x9b000plipy1a4dlpy7"}],"PostAsset":[],"PostCategory":[{"post_id":"cijbm5x7u0000lipy0ptl4g8n","category_id":"cijbm5x800001lipy9q52yn16","_id":"cijbm5x820002lipym18ppsfi"},{"post_id":"cijbm5x8b0003lipyb9e5srvn","category_id":"cijbm5x8d0004lipy7kywn8oz","_id":"cijbm5x8d0005lipyxtfw53uv"},{"post_id":"cijbm5x8e0006lipy0f0juo9k","category_id":"cijbm5x8d0004lipy7kywn8oz","_id":"cijbm5x8g0007lipyh8hm9ts8"},{"post_id":"cijbm5x8i000blipyyvaioks6","category_id":"cijbm5x8d0004lipy7kywn8oz","_id":"cijbm5x8j000clipy8a0dwrsb"},{"post_id":"cijbm5x8k000dlipy7fwn8vea","category_id":"cijbm5x8d0004lipy7kywn8oz","_id":"cijbm5x8l000elipygdhwzzjz"},{"post_id":"cijbm5x8n000flipyspipdvts","category_id":"cijbm5x8d0004lipy7kywn8oz","_id":"cijbm5x8o000glipyrwzzhzek"},{"post_id":"cijbm5x8q000hlipyonfdysie","category_id":"cijbm5x8d0004lipy7kywn8oz","_id":"cijbm5x8r000ilipyxlhkmt1i"},{"post_id":"cijbm5x8t000jlipyirt0zjln","category_id":"cijbm5x8d0004lipy7kywn8oz","_id":"cijbm5x8u000klipysp6epe30"},{"post_id":"cijbm5x8w000llipywkflzsp1","category_id":"cijbm5x8d0004lipy7kywn8oz","_id":"cijbm5x93000mlipygexvaeei"},{"post_id":"cijbm5x95000nlipymcq8dg2m","category_id":"cijbm5x8d0004lipy7kywn8oz","_id":"cijbm5x9a000olipygjgw4b24"},{"post_id":"cijbm5x9b000plipy1a4dlpy7","category_id":"cijbm5x8d0004lipy7kywn8oz","_id":"cijbm5x9d000qlipydbtrayvl"},{"post_id":"cijbm5x8g0008lipyyfgb8rhd","category_id":"cijbm5x8h0009lipy6rtdyzdh","_id":"ciju7lodc0000kspywrs6b7sf"}],"PostTag":[],"Tag":[]}}